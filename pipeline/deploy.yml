parameters:
- name: serviceConnection
  type: string  
- name: environment
  type: string  
- name: environmentName
  type: string
- name: variableGroup
  type: string
    
stages:
  - stage: Deploy_${{ parameters.environmentName }}
    displayName: Deploy Stage
    dependsOn: [Build] 

    variables:
    - group: ${{ parameters.variableGroup }}

    jobs:       
    - deployment: Deploy_${{ parameters.environmentName }}
      displayName: ${{ parameters.environmentName }} environment
      environment: ${{ parameters.environment }}    
      strategy:
        runOnce:
          deploy:
            steps:

            - task: AzureCLI@2
              displayName: Restore secrets from AZ KeyVault
              inputs:
                azureSubscription: ${{ parameters.serviceConnection }}
                scriptType: 'pscore'
                scriptLocation: 'inlineScript'
                inlineScript: |
                  $kvName = "$(keyVaultName)"

                  $secrets = (az keyvault secret list --vault-name $kvName --query "[].name" -o tsv)

                  Foreach ($secret in $secrets) {

                    Write-Host "Donwloading secret $secret from KeyVault: $kvName"
                    $secretValue = (az keyvault secret show --vault-name $kvName -n $secret --query "value" -o tsv)
                    echo "##vso[task.setvariable variable=$secret;issecret=true]$secretValue"
                  }

            - task: AzureCLI@2
              displayName: 'Deploy files'
              inputs:
                azureSubscription: ${{ parameters.serviceConnection }}
                scriptType: bash
                scriptLocation: 'inlineScript'
                addSpnToEnvironment: true
                inlineScript: |

                  currentDate=$(date '+%Y%m%d_%H%M%S')
                  echo "Current Date: $currentDate"
                  
                  echo "Unpacking files..."
                  tar -xf $(Agent.BuildDirectory)/deployUsingBastion/deployUsingBastion.tgz -C $(Agent.BuildDirectory)/deployUsingBastion/ 

                  echo  "Install az ssh extension..."
                  az config set extension.use_dynamic_install=yes_without_prompt

                  vmID="/subscriptions/$(subscriptionID)/resourceGroups/$(destinationResourceGroup)/providers/Microsoft.Compute/virtualMachines/$(vmName)"

                  echo "Open bastion tunnel..."
                  az network bastion tunnel --name $(bastionName) --resource-group $(bastionResourceGroup) --target-resource-id $vmID --resource-port $(sshPort) --port $(bastionTunnelPort) &

                  tunnelPID=$!

                  echo "Bastion tunnel open with ID: ${tunnelPID}"

                  echo "Creating SSH certs..."
                  az ssh cert --file ./cert.pub 

                  echo "Copying files to server..."
                  scp -v -P $(bastionTunnelPort) -i ./id_rsa -o CertificateFile=./cert.pub -o StrictHostKeyChecking=no -r $(Agent.BuildDirectory)/deployUsingBastion/deployUsingBastion/ $servicePrincipalId@127.0.0.1:/home/$servicePrincipalId/deployUsingBastion_$currentDate/

                  echo "Killing Bastion tunnel process..."
                  pkill -TERM -P $tunnelPID
